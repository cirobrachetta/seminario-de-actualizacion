Model (backend):

// Model.js
import { PersistenceManager } from "./PersistenceManager.js";

const persistence = new PersistenceManager();

export class UserABMmodel {
	constructor(persistCallback) {
		this.usuarios = new Map();
		this.maxLoginFailedAttempts = 3;
		this.persist = persistCallback;
	}

	async init() {
		const data = await persistence.load("usuarios");
		if (data) {
			this.usuarios = new Map(JSON.parse(data));
		} else {
			this.initDefaultUsers();
			this.persist();
		}
	}

	initDefaultUsers() {
		this.usuarios.set("ciro", { password: "dsaewq321", failedLoginCounter: 0, isLocked: false, rol: "ADMIN" });
		this.usuarios.set("clienteUser", { password: "987654", failedLoginCounter: 0, isLocked: false, rol: "CLIENTE" });
		this.usuarios.set("vendedorUser", { password: "vent123!!", failedLoginCounter: 0, isLocked: false, rol: "VENDEDOR" });
		this.usuarios.set("depositoUser", { password: "deposito##", failedLoginCounter: 0, isLocked: false, rol: "DEPOSITO" });
	}

	toJSON() {
		return JSON.stringify([...this.usuarios.entries()]);
	}

	isStrongPassword(password) {
		const specialChars = /[^A-Za-z0-9]/g;
		const uppercase = /[A-Z]/;
		const lengthValid = password.length >= 8 && password.length <= 16;
		const hasUppercase = uppercase.test(password);
		const specialMatches = password.match(specialChars);
		const hasTwoSpecials = specialMatches && specialMatches.length >= 2;
		return lengthValid && hasUppercase && hasTwoSpecials;
	}

	authenticate(username, password) {
		let result = { status: false, result: null };
		if (!username || !password) return { result: "USER_PASSWORD_FAILED" };
		const user = this.usuarios.get(username);
		if (!user) return { result: "USER_PASSWORD_FAILED" };
		if (user.isLocked) return { result: "BLOCKED_USER" };

		if (user.password === password) {
			user.failedLoginCounter = 0;
			result.status = true;
			result.result = { username, rol: user.rol };
		} else {
			user.failedLoginCounter++;
			if (user.failedLoginCounter >= this.maxLoginFailedAttempts) {
				user.isLocked = true;
				result.result = "BLOCKED_USER";
			} else {
				result.result = "USER_PASSWORD_FAILED";
			}
		}

		this.persist();
		return result;
	}

	crearCuenta(username, password) {
		if (!username || !password) return { status: "INVALID_INPUT" };
		if (this.usuarios.has(username)) return { status: "USER_EXISTS" };
		if (!this.isStrongPassword(password)) return { status: "WEAK_PASSWORD" };

		this.usuarios.set(username, { password, failedLoginCounter: 0, isLocked: false, rol: "CLIENTE" });
		this.persist();
		return { status: "OK" };
	}

	updatePassword(username, newPassword) {
		if (!this.usuarios.has(username)) return false;
		if (!this.isStrongPassword(newPassword)) return false;
		this.usuarios.get(username).password = newPassword;
		this.persist();
		return true;
	}

	deleteUser(username) {
		const result = this.usuarios.delete(username);
		this.persist();
		return result;
	}

	listUsers() {
		if (this.usuarios.size === 0) return "No hay usuarios registrados.";
		let result = "Usuarios:\n";
		for (let [key, val] of this.usuarios.entries()) {
			result += `• ${key} - Rol: ${val.rol} - Estado: ${val.isLocked ? 'Bloqueado' : 'Activo'}\n`;
		}
		return result;
	}
}

export class ProductABMmodel {
	constructor(productos, persistCallback) {
		this.productos = productos;
		this.persist = persistCallback;
	}

	listar() {
		return [...this.productos.entries()];
	}

	getNextId() {
		if (this.productos.size === 0) return 1;
		return Math.max(...this.productos.keys()) + 1;
	}

	agregar(nombre, precio, stock) {
		const id = this.getNextId();
		this.productos.set(id, { nombre, precio, stock });
		this.persist();
		return id;
	}

	comprar(id, cantidad) {
		if (!this.productos.has(id)) throw new Error("NOT_FOUND");
		let producto = this.productos.get(id);
		if (producto.stock < cantidad) throw new Error("INSUFFICIENT_STOCK");
		producto.stock -= cantidad;
		this.productos.set(id, producto);
		this.persist();
		return producto;
	}

	editar(id, nombre, precio, stock) {
		if (!this.productos.has(id)) throw new Error("NOT_FOUND");
		this.productos.set(id, { nombre, precio, stock });
		this.persist();
	}

	eliminar(id) {
		if (!this.productos.has(id)) throw new Error("NOT_FOUND");
		this.productos.delete(id);
		this.persist();
	}
}

export class RolABMmodel {
	constructor() {
		this.permisos = {
			ADMIN: ["listar", "agregar", "editar", "eliminar", "comprar"],
			VENDEDOR: ["listar", "agregar", "editar"],
			CLIENTE: ["listar", "comprar"],
			DEPOSITO: ["listar"]
		};
	}

	tienePermiso(rol, accion) {
		return this.permisos[rol]?.includes(accion);
	}

	getAccionesDisponibles(rol) {
		return this.permisos[rol] || [];
	}
}

export class ApplicationModel {
	constructor() {
		this.productos = new Map();
		this.roles = new RolABMmodel();

		this.persistUsuarios = () => persistence.save("usuarios", this.usuarios.toJSON());
		this.persistProductos = () => persistence.save("productos", JSON.stringify([...this.productos.entries()]));

		this.usuarios = new UserABMmodel(this.persistUsuarios);
		this.adminProductos = new ProductABMmodel(this.productos, this.persistProductos);
	}

	async init() {
		await this.usuarios.init();
		const productos = await persistence.load("productos");
		if (productos) {
			this.productos = new Map(JSON.parse(productos));
			this.adminProductos.productos = this.productos;
		} else {
			this.loadDefaultProducts();
			this.persistProductos();
		}
	}

	loadDefaultProducts() {
		this.productos.set(1, { nombre: "Lavandina x 1L", precio: 875.25, stock: 3000 });
		this.productos.set(4, { nombre: "Detergente x 500mL", precio: 1102.45, stock: 2010 });
		this.productos.set(22, { nombre: "Jabón en polvo x 250g", precio: 650.22, stock: 407 });
	}

	createProductoController() {
		return this.adminProductos;
	}

	get rolesController() {
		return this.roles;
	}
}


GUI(frontend):

function GUI_crearCuenta(model) {
	const username = prompt("Ingrese nombre de usuario:");
	const password = prompt("Ingrese contraseña:");

	const result = model.usuarios.crearCuenta(username, password);

	switch (result.status) {
		case "OK":
			alert("Cuenta creada exitosamente");
			break;
		case "USER_EXISTS":
			alert("El usuario ya existe");
			break;
		case "WEAK_PASSWORD":
			alert("Contraseña no válida. Debe tener:\n8-16 caracteres, al menos 1 mayúscula y 2 símbolos especiales.");
			break;
		case "INVALID_INPUT":
			alert("Nombre de usuario y contraseña son obligatorios");
			break;
		default:
			alert("Error desconocido al crear cuenta");
	}
}

function GUI_login(model) {
	let username = prompt("Ingrese su nombre de usuario:");
	let password = prompt("Ingrese contraseña:");

	let api_return = model.usuarios.authenticate(username, password);

	if (api_return.status) {
		alert(`¡Bienvenido/a ${username}!`);
		return api_return.result;
	} else {
		switch (api_return.result) {
			case 'BLOCKED_USER':
				alert('Usuario bloqueado. Contacte al administrador');
				break;
			case 'USER_PASSWORD_FAILED':
				alert('Usuario y/o contraseña incorrecta');
				break;
			default:
				alert('Error desconocido');
				break;
		}
		return null;
	}
}

function GUI_gestionUsuarios(model) {
	let salir = false;

	while (!salir) {
		const opcion = prompt(
			"Gestión de Usuarios (ADMIN):\n1. Crear cuenta\n2. Editar cuenta\n3. Eliminar cuenta\n4. Listar cuentas\n5. Volver"
		);

		switch (opcion) {
			case "1":
				GUI_crearCuenta(model);
				break;

			case "2": {
				const usuarioEditar = prompt("Ingrese el nombre de usuario a editar:");
				if (model.usuarios.hasUser(usuarioEditar)) {
					let newPassword = prompt("Nueva contraseña:");
					if (model.usuarios.isStrongPassword(newPassword)) {
						model.usuarios.updatePassword(usuarioEditar, newPassword);
						alert("Contraseña actualizada.");
					} else {
						alert("Contraseña no válida.");
					}
				} else {
					alert("Usuario no encontrado.");
				}
				break;
			}

			case "3": {
				const usuarioEliminar = prompt("Ingrese el nombre de usuario a eliminar:");
				if (model.usuarios.hasUser(usuarioEliminar)) {
					model.usuarios.deleteUser(usuarioEliminar);
					alert("Usuario eliminado.");
				} else {
					alert("Usuario no encontrado.");
				}
				break;
			}

			case "4": {
				const listado = model.usuarios.listUsers();
				alert(listado);
				break;
			}

			case "5":
				salir = true;
				break;

			default:
				alert("Opción inválida.");
		}
	}
}

function GUI_gestionArticulos(adminProductos, rol, rolesController) {
	let salir = false;

	while (!salir) {
		let menu = "Gestión de Artículos:\n";
		let opciones = [];

		if (rolesController.tienePermiso(rol, "listar")) {
			menu += "1. Listar artículos\n";
			opciones.push("1");
		}
		if (rolesController.tienePermiso(rol, "agregar")) {
			menu += "2. Nuevo artículo\n";
			opciones.push("2");
		}
		if (rolesController.tienePermiso(rol, "editar")) {
			menu += "3. Editar artículo\n";
			opciones.push("3");
		}
		if (rolesController.tienePermiso(rol, "eliminar")) {
			menu += "4. Eliminar artículo\n";
			opciones.push("4");
		}
		if (rolesController.tienePermiso(rol, "comprar")) {
			menu += "5. Comprar artículo\n";
			opciones.push("5");
		}

		menu += "6. Volver al menú anterior";

		let opcion = prompt(menu);

		switch (opcion) {
			case "1":
				alert(
					adminProductos.listar()
						.map(
							([id, prod]) => `ID: ${id}, ${prod.nombre} - $${prod.precio} - Stock: ${prod.stock}`
						)
						.join("\n") || "No hay productos."
				);
				break;

			case "2": {
				const nombre = prompt("Nombre del producto:");
				const precio = parseFloat(prompt("Precio:"));
				const stock = parseInt(prompt("Stock:"), 10);
				adminProductos.agregar(nombre, precio, stock);
				alert("Producto agregado.");
				break;
			}

			case "3": {
				const idEditar = parseInt(prompt("ID del producto a editar:"), 10);
				const nuevoNombre = prompt("Nuevo nombre:");
				const nuevoPrecio = parseFloat(prompt("Nuevo precio:"));
				const nuevoStock = parseInt(prompt("Nuevo stock:"), 10);
				try {
					adminProductos.editar(idEditar, nuevoNombre, nuevoPrecio, nuevoStock);
					alert("Producto editado.");
				} catch {
					alert("Producto no encontrado.");
				}
				break;
			}

			case "4": {
				const idEliminar = parseInt(prompt("ID del producto a eliminar:"), 10);
				try {
					adminProductos.eliminar(idEliminar);
					alert("Producto eliminado.");
				} catch {
					alert("Producto no encontrado.");
				}
				break;
			}

			case "5": {
				const idComprar = parseInt(prompt("ID del producto a comprar:"), 10);
				const cantidad = parseInt(prompt("Cantidad a comprar:"), 10);
				try {
					adminProductos.comprar(idComprar, cantidad);
					alert("Compra realizada.");
				} catch (err) {
					if (err.message === "NOT_FOUND") {
						alert("Producto no encontrado.");
					} else if (err.message === "INSUFFICIENT_STOCK") {
						alert("Stock insuficiente.");
					} else {
						alert("Error en la compra.");
					}
				}
				break;
			}

			case "6":
				salir = true;
				break;

			default:
				alert("Opción inválida.");
		}
	}
}

function showUserMenu(username, rol, adminProductos, rolesController, model) {
	let option;
	let repeat = true;

	while (repeat) {
		let menu = `[${rol}] Seleccione una opción:\n1. Cambiar contraseña\n2. Menú de artículos\n`;

		if (rolesController.tienePermiso(rol, "comprar")) {
			menu += "3. Comprar artículo\n";
		}

		if (rol === "ADMIN") {
			menu += "4. Gestión de usuarios\n";
		}

		menu += "5. Salir";

		option = prompt(menu);

		switch (option) {
			case '1': {
				let newPassword = prompt("Ingrese nueva contraseña:");
				if (model.usuarios.isStrongPassword(newPassword)) {
					model.usuarios.updatePassword(username, newPassword);
					alert("Contraseña actualizada correctamente.");
				} else {
					alert("Contraseña no cumple los requisitos.");
				}
				break;
			}

			case '2':
				GUI_gestionArticulos(adminProductos, rol, rolesController);
				break;

			case '3':
				if (rolesController.tienePermiso(rol, "comprar")) {
					GUI_gestionArticulos(adminProductos, rol, rolesController);
				} else {
					alert("No tiene permiso.");
				}
				break;

			case '4':
				if (rol === "ADMIN") {
					GUI_gestionUsuarios(model);
				} else {
					alert("Acceso denegado.");
				}
				break;

			case '5':
				alert("Saliendo...");
				repeat = false;
				break;

			default:
				alert("Opción inválida.");
		}
	}
}

class ApplicationUI {
	constructor(model) {
		this.model = model;
	}

	run() {
		const admin = this.model.adminProductos;
		const rolesController = this.model.rolesController;

		let exit = false;

		while (!exit) {
			const option = prompt("Seleccione una opción:\n1. Iniciar sesión\n2. Salir");

			switch (option?.toUpperCase()) {
				case "1": {
					let loginResult = GUI_login(this.model);
					if (loginResult) {
						showUserMenu(loginResult.username, loginResult.rol, admin, rolesController, this.model);
					}
					break;
				}

				case "2":
					alert("Gracias por usar el sistema.");
					exit = true;
					break;

				default:
					alert("Opción no válida.");
			}
		}
	}
}

export { ApplicationUI };

PersistenceManager:

// PersistenceManager.js

export class PersistenceManager {
	constructor(dbName = 'AppDB', storeName = 'AppStore') {
		this.dbName = dbName;
		this.storeName = storeName;
	}

	openDB() {
		return new Promise((resolve, reject) => {
			const request = indexedDB.open(this.dbName, 2);
			request.onupgradeneeded = (e) => {
				const db = e.target.result;
				if (!db.objectStoreNames.contains('usuarios')) {
					db.createObjectStore('usuarios');
				}
				if (!db.objectStoreNames.contains('productos')) {
					db.createObjectStore('productos');
				}
			};
			request.onsuccess = () => resolve(request.result);
			request.onerror = () => reject(request.error);
		});
	}

	async save(key, data) {
		const db = await this.openDB();
		const tx = db.transaction(this.storeName, "readwrite");
		const store = tx.objectStore(this.storeName);
		store.put(data, key);
		return new Promise((resolve, reject) => {
			tx.oncomplete = () => {
				db.close();
				resolve();
			};
			tx.onerror = () => {
				db.close();
				reject(tx.error);
			};
		});
	}

	async load(key) {
		const db = await this.openDB();
		const tx = db.transaction(this.storeName, "readonly");
		const store = tx.objectStore(this.storeName);
		const request = store.get(key);

		return new Promise((resolve) => {
			request.onsuccess = () => {
				db.close();
				resolve(request.result ?? null);
			};
			request.onerror = () => {
				db.close();
				resolve(null);
			};
		});
	}
}


main.js:

import { PersistenceManager } from "./Model/PersistenceManager.js";
import { ApplicationModel } from "./Model/Model.js";
import { ApplicationUI } from "./GUI/GUI.js"; // Asumiendo que tu GUI está ahí

async function main() {
	const persistence = new PersistenceManager();

	const model = new ApplicationModel(persistence);
	await model.init();

	const app = new ApplicationUI(model);
	app.run();
}

main();


index.html:

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Gestión de Usuarios y Productos</title>
</head>
<body>
  <script type="module" src="./main.js"></script>
</body>
</html>


Uncaught (in promise) NotFoundError: Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.
    at PersistenceManager.load (PersistenceManager.js:45:17)
    at async UserABMmodel.init (Model.js:14:16)
    at async ApplicationModel.init (Model.js:180:3)
    at async main (main.js:9:2)